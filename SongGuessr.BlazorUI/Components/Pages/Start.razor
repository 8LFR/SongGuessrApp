@page "/start"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SongGuessr.BlazorUI.Services
@using SongGuessr.Shared.Lobbys
@using SongGuessr.Shared.Players
@inject ILobbysService LobbysService
@inject IPlayersService PlayersService
@inject AuthenticationState AuthenticationState
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<PageTitle>SongGuessr</PageTitle>

<div class="lobby-section">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (string.IsNullOrWhiteSpace(AuthenticationState.PlayerName))
    {
        <EditForm Model="@player" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="playerName">Player Name:</label>
                <InputText id="playerName" @bind-Value="player.Name" />
            </div>

            <button type="submit">Submit</button>
        </EditForm>
    }
    else
    {
        <p>Welcome, @AuthenticationState.PlayerName!</p>

        <button class="menu-button" @onclick="ShowCreateLobbyModal">Create Lobby</button>
        <button class="menu-button" @onclick="ShowJoinLobbyModal">Join Lobby</button>
    }

    @if (LobbyCreationResult != null)
    {
        <p class="text-success">@LobbyCreationResult</p>
    }
    @if (LobbyCreationError != null)
    {
        <p class="text-danger">@LobbyCreationError</p>
    }

    @if (LobbyJoinResult != null)
    {
        <p class="text-success">@LobbyJoinResult</p>
    }
    @if (LobbyJoinError != null)
    {
        <p class="text-danger">@LobbyJoinError</p>
    }
</div>

@if (ShowCreateLobby)
{
    <LobbyModal Title="Create Lobby" OnClose="CloseCreateLobbyModal">
        <input class="lobby-name-input" type="text" 
               placeholder="Enter Lobby name" 
               @bind="LobbyName" />
        <input type="checkbox" 
            @bind="IsPublic" 
            id="public-checkbox" />
        <label for="public-checkbox">Public</label>
        <br />
        <button class="btn btn-success" @onclick="CreateLobby">
            Create
        </button>
    </LobbyModal>
}

@if (ShowJoinLobby)
{
    <LobbyModal Title="Join Lobby" OnClose="CloseJoinLobbyModal">
        <input class="lobby-id-input" type="text"
               placeholder="Enter Lobby ID"
               @bind="LobbyId" />
        <br />
        <button class="btn btn-success" @onclick="JoinLobby">
            Join
        </button>
    </LobbyModal>
}

@code {
    private string LobbyName { get; set; }
    private string LobbyId { get; set; }
    private bool IsPublic { get; set; }
    private bool ShowCreateLobby { get; set; } = false;
    private bool ShowJoinLobby { get; set; } = false;
    private string? LobbyCreationResult {get;set;}
    private string? LobbyCreationError { get; set; }
    private string? LobbyJoinResult { get; set; }
    private string? LobbyJoinError { get; set; }
    private bool isLoading { get; set; } = true;
    private Player player = new Player();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("playerName");

            if (result.Success)
            {
                AuthenticationState.PlayerName = result.Value;
            }

            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreatePlayerAsync()
    {
        if (!string.IsNullOrWhiteSpace(player.Name))
        {
            var request = new CreatePlayerRequest(player.Name);
            var result = await PlayersService.CreatePlayerAsync(request, default);

            if (result.IsSuccess)
            {
                await ProtectedLocalStorage.SetAsync("playerName", player.Name);
                AuthenticationState.PlayerName = player.Name;
            }
            else
            {
                // Handle error here
            }
        }
    }

    private void ShowCreateLobbyModal()
    {
        ShowCreateLobby = true;
        ShowJoinLobby = false;
    }

    private void CloseCreateLobbyModal() => ShowCreateLobby = false;

    private void ShowJoinLobbyModal()
    {
        ShowJoinLobby = true;
        ShowCreateLobby = false;
    }

    private void CloseJoinLobbyModal() => ShowJoinLobby = false;

    private async Task CreateLobby()
    {
        LobbyCreationResult = null;
        LobbyCreationError = null;

        if (string.IsNullOrWhiteSpace(AuthenticationState.PlayerName))
        {
            LobbyCreationError = "Player name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(LobbyName))
        {
            LobbyCreationError = "Lobby name is required.";
            return;
        }

        var request = new CreateLobbyRequest(LobbyName, IsPublic, AuthenticationState.PlayerName);
        var result = await LobbysService.CreateLobbyAsync(request, default);

        if (result.IsSuccess)
        {
            AuthenticationState.IsHost = true;
            CloseCreateLobbyModal();
            NavigationManager.NavigateTo($"/lobby/{result.Value.LobbyId}");
        }
        else
        {
            LobbyCreationError = "Failed to create lobby. Please try again.";
        }
    }

    private async Task JoinLobby()
    {
        LobbyJoinResult = null;
        LobbyJoinError = null;

        if (string.IsNullOrWhiteSpace(AuthenticationState.PlayerName))
        {
            LobbyJoinError = "Player name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(LobbyId))
        {
            LobbyJoinError = "Lobby ID is required.";
            return;
        }

        var request = new JoinLobbyRequest(LobbyId, AuthenticationState.PlayerName);
        var result = await LobbysService.JoinLobbyAsync(request, default);

        if (result.IsSuccess)
        {
            CloseJoinLobbyModal();
            NavigationManager.NavigateTo($"/lobby/{result.Value.LobbyId}");
        }
        else
        {
            LobbyJoinError = result.Error;
        }
    }

    private async Task HandleValidSubmit() => await CreatePlayerAsync();
}

@code {
    public class LobbyModal : ComponentBase
    {
        [Parameter] public string Title { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public EventCallback OnClose { get; set; }

        private Task CloseModal() => OnClose.InvokeAsync();
    }
}

<style>
    .menu-button {
        background-color: #3498db;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        margin: 20px;
    }

        .menu-button:hover {
            background-color: #2980b9;
        }

    .lobby-section {
        margin-top: 20px;
        text-align: center;
    }

    .player-name-input {
        padding: 10px;
        margin: 10px 0;
        width: 300px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
</style>
